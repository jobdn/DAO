/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DAOInterface extends utils.Interface {
  functions: {
    "_chainperson()": FunctionFragment;
    "_duration()": FunctionFragment;
    "_minimumQuorum()": FunctionFragment;
    "_token()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "voters(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_chainperson"
      | "_duration"
      | "_minimumQuorum"
      | "_token"
      | "deposit"
      | "voters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_chainperson",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_minimumQuorum",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "_chainperson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_minimumQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {};
}

export interface DAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _chainperson(overrides?: CallOverrides): Promise<[string]>;

    _duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    _minimumQuorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    _token(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        lastVotingTime: BigNumber;
        exists: boolean;
      }
    >;
  };

  _chainperson(overrides?: CallOverrides): Promise<string>;

  _duration(overrides?: CallOverrides): Promise<BigNumber>;

  _minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

  _token(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      lastVotingTime: BigNumber;
      exists: boolean;
    }
  >;

  callStatic: {
    _chainperson(overrides?: CallOverrides): Promise<string>;

    _duration(overrides?: CallOverrides): Promise<BigNumber>;

    _minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    _token(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        lastVotingTime: BigNumber;
        exists: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    _chainperson(overrides?: CallOverrides): Promise<BigNumber>;

    _duration(overrides?: CallOverrides): Promise<BigNumber>;

    _minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    _token(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _chainperson(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _minimumQuorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
